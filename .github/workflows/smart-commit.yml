name: Smart Auto Commit

on:
  schedule:
    # 每天多次执行，模拟真实开发节奏
    - cron: '0 2 * * *'   # 北京时间10点
    - cron: '0 6 * * *'   # 北京时间14点
    - cron: '0 10 * * *'  # 北京时间18点
  workflow_dispatch:
    inputs:
      commit_type:
        description: 'Type of commit to make'
        required: false
        default: 'random'
        type: choice
        options:
        - random
        - docs
        - feat
        - fix
        - refactor
        - style

jobs:
  smart-commit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Configure Git
      run: |
        git config --local user.email "chord244@gmail.com"
        git config --local user.name "Chord"
        
    - name: Determine commit type and content
      id: commit-info
      run: |
        # 定义提交类型和对应的操作
        declare -A commit_types=(
          ["docs"]="Documentation update"
          ["feat"]="Feature enhancement"
          ["fix"]="Bug fix and improvements"
          ["refactor"]="Code refactoring"
          ["style"]="Code formatting and style"
          ["chore"]="Maintenance and cleanup"
        )
        
        declare -A commit_actions=(
          ["docs"]="update_docs"
          ["feat"]="add_feature"
          ["fix"]="fix_issues"
          ["refactor"]="refactor_code"
          ["style"]="format_code"
          ["chore"]="maintenance"
        )
        
        # 随机选择提交类型（如果不是手动指定）
        if [ "${{ github.event.inputs.commit_type }}" = "random" ] || [ -z "${{ github.event.inputs.commit_type }}" ]; then
          types=("docs" "feat" "fix" "refactor" "style" "chore")
          selected_type=${types[$RANDOM % ${#types[@]}]}
        else
          selected_type="${{ github.event.inputs.commit_type }}"
        fi
        
        echo "type=$selected_type" >> $GITHUB_OUTPUT
        echo "description=${commit_types[$selected_type]}" >> $GITHUB_OUTPUT
        echo "action=${commit_actions[$selected_type]}" >> $GITHUB_OUTPUT
        
        # 生成随机的具体描述
        case $selected_type in
          "docs")
            details=("README improvements" "API documentation" "installation guide" "usage examples" "troubleshooting guide")
            ;;
          "feat")
            details=("performance optimization" "new utility functions" "enhanced error handling" "improved logging" "configuration options")
            ;;
          "fix")
            details=("memory leak prevention" "edge case handling" "error message clarity" "input validation" "resource cleanup")
            ;;
          "refactor")
            details=("code structure improvement" "function extraction" "variable naming" "module organization" "dependency cleanup")
            ;;
          "style")
            details=("code formatting" "comment updates" "whitespace cleanup" "naming conventions" "file organization")
            ;;
          "chore")
            details=("dependency updates" "build script improvements" "CI/CD enhancements" "tooling configuration" "project maintenance")
            ;;
        esac
        
        selected_detail=${details[$RANDOM % ${#details[@]}]}
        echo "detail=$selected_detail" >> $GITHUB_OUTPUT
        
    - name: Generate content based on commit type
      run: |
        timestamp=$(date +'%Y-%m-%d %H:%M:%S')
        commit_type="${{ steps.commit-info.outputs.type }}"
        detail="${{ steps.commit-info.outputs.detail }}"
        
        case $commit_type in
          "docs")
            # 更新文档
            if [ ! -f CHANGELOG.md ]; then
              echo "# Changelog" > CHANGELOG.md
              echo "" >> CHANGELOG.md
            fi
            echo "## [$timestamp] - Documentation Update" >> CHANGELOG.md
            echo "- Enhanced $detail" >> CHANGELOG.md
            echo "- Improved project documentation" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            
            # 更新 README 统计信息
            if grep -q "Last updated:" README.md; then
              sed -i "s/Last updated:.*/Last updated: $timestamp/g" README.md
            else
              echo "" >> README.md
              echo "*Last updated: $timestamp*" >> README.md
            fi
            ;;
            
          "feat")
            # 添加功能相关文件
            echo "# Feature Log" > FEATURES.md
            echo "" >> FEATURES.md
            echo "## Latest Features" >> FEATURES.md
            echo "- [$timestamp] Added $detail" >> FEATURES.md
            echo "- Enhanced system capabilities" >> FEATURES.md
            echo "- Improved user experience" >> FEATURES.md
            ;;
            
          "fix")
            # 记录修复
            echo "# Bug Fixes" > FIXES.md
            echo "" >> FIXES.md
            echo "## Recent Fixes" >> FIXES.md
            echo "- [$timestamp] Fixed $detail" >> FIXES.md
            echo "- Improved system stability" >> FIXES.md
            echo "- Enhanced error handling" >> FIXES.md
            ;;
            
          "refactor")
            # 重构记录
            echo "# Refactoring Log" > REFACTOR.md
            echo "" >> REFACTOR.md
            echo "## Code Improvements" >> REFACTOR.md
            echo "- [$timestamp] Refactored $detail" >> REFACTOR.md
            echo "- Improved code quality" >> REFACTOR.md
            echo "- Enhanced maintainability" >> REFACTOR.md
            ;;
            
          "style")
            # 样式更新
            echo "# Style Guide" > STYLE.md
            echo "" >> STYLE.md
            echo "## Code Style Updates" >> STYLE.md
            echo "- [$timestamp] Updated $detail" >> STYLE.md
            echo "- Consistent formatting applied" >> STYLE.md
            echo "- Improved code readability" >> STYLE.md
            ;;
            
          "chore")
            # 维护记录
            echo "# Maintenance Log" > MAINTENANCE.md
            echo "" >> MAINTENANCE.md
            echo "## System Maintenance" >> MAINTENANCE.md
            echo "- [$timestamp] Performed $detail" >> MAINTENANCE.md
            echo "- System optimization" >> MAINTENANCE.md
            echo "- Infrastructure improvements" >> MAINTENANCE.md
            ;;
        esac
        
        # 更新全局活动日志
        echo "[$timestamp] $commit_type: $detail" >> ACTIVITY.log
        
    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        commit_type="${{ steps.commit-info.outputs.type }}"
        description="${{ steps.commit-info.outputs.description }}"
        detail="${{ steps.commit-info.outputs.detail }}"
        
        # 生成符合 Conventional Commits 规范的提交信息
        git add .
        git commit -m "$commit_type: $detail
        
        $description - automated commit
        
        - Enhanced project maintenance
        - Improved code quality
        - Updated documentation
        
        Co-authored-by: GitHub Actions <actions@github.com>"
        git push
        
    - name: No changes detected
      if: steps.verify-changed-files.outputs.changed == 'false'
      run: |
        echo "No changes detected for commit type: ${{ steps.commit-info.outputs.type }}"
        echo "Skipping commit to avoid empty commits."