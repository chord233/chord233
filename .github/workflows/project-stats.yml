name: Project Statistics & Progress Tracking

on:
  schedule:
    # 每周统计一次项目数据
    - cron: '0 0 * * 1'   # 每周一北京时间8点
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - '**.md'
      - '**.yml'
      - '**.yaml'

jobs:
  update-stats:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Configure Git
      run: |
        git config --local user.email "chord244@gmail.com"
        git config --local user.name "Chord"
        
    - name: Generate comprehensive project statistics
      run: |
        timestamp=$(date +'%Y-%m-%d %H:%M:%S')
        
        # 创建详细的项目统计报告
        cat > PROJECT_STATS.md << EOF
        # 📊 Project Statistics Dashboard
        
        *Generated on: $timestamp*
        
        ## 📈 Repository Overview
        
        ### Basic Information
        - **Repository Name**: chord233 (Personal Portfolio)
        - **Owner**: Chord (@chord233)
        - **Primary Language**: Markdown, YAML
        - **License**: $(cat LICENSE 2>/dev/null | head -1 || echo 'Not specified')
        - **Last Updated**: $timestamp
        
        ### 📁 File Statistics
        - **Total Files**: $(find . -type f | grep -v '.git' | wc -l)
        - **Markdown Files**: $(find . -name '*.md' | wc -l)
        - **YAML Files**: $(find . -name '*.yml' -o -name '*.yaml' | wc -l)
        - **Documentation Files**: $(find . -name '*.md' -o -name '*.txt' -o -name '*.rst' | wc -l)
        
        ### 📝 Content Analysis
        - **Total Lines**: $(find . -name '*.md' -o -name '*.yml' -o -name '*.yaml' | xargs wc -l 2>/dev/null | tail -1 | awk '{print \$1}' || echo '0')
        - **Word Count**: $(find . -name '*.md' | xargs wc -w 2>/dev/null | tail -1 | awk '{print \$1}' || echo '0')
        - **Character Count**: $(find . -name '*.md' | xargs wc -c 2>/dev/null | tail -1 | awk '{print \$1}' || echo '0')
        
        ### 🔄 Git Statistics
        - **Total Commits**: $(git rev-list --count HEAD)
        - **Branches**: $(git branch -r | wc -l)
        - **Contributors**: $(git log --format='%aN' | sort -u | wc -l)
        - **First Commit**: $(git log --reverse --format='%cd' --date=short | head -1)
        - **Latest Commit**: $(git log -1 --format='%cd' --date=short)
        
        ### 📅 Activity Timeline
        - **Repository Age**: $(( ($(date +%s) - $(git log --reverse --format='%ct' | head -1)) / 86400 )) days
        - **Commits This Month**: $(git log --since="1 month ago" --oneline | wc -l)
        - **Commits This Week**: $(git log --since="1 week ago" --oneline | wc -l)
        - **Average Commits per Day**: $(echo "scale=2; $(git rev-list --count HEAD) / $(( ($(date +%s) - $(git log --reverse --format='%ct' | head -1)) / 86400 ))" | bc -l 2>/dev/null || echo '0')
        
        ## 📋 Project Components
        
        ### Core Files
        EOF
        
        # 分析主要文件
        for file in README.md PROJECTS.md RESUME.md; do
          if [ -f "$file" ]; then
            lines=$(wc -l < "$file")
            words=$(wc -w < "$file")
            echo "- **$file**: $lines lines, $words words" >> PROJECT_STATS.md
          fi
        done
        
        cat >> PROJECT_STATS.md << EOF
        
        ### Automation & CI/CD
        - **GitHub Actions Workflows**: $(find .github/workflows -name '*.yml' 2>/dev/null | wc -l)
        - **Automated Processes**: Daily commits, project statistics, weekend activities
        - **Last Automation Run**: $timestamp
        
        ## 🎯 Development Focus Areas
        
        ### Technical Skills Demonstrated
        - Systems Programming (Rust, C++)
        - Hardware Design (RISC-V, Verilog)
        - Blockchain Technology
        - High-Performance Computing
        - Distributed Systems
        
        ### Project Categories
        - **Hardware Projects**: RISC-V CPU Design
        - **Systems Programming**: OS Kernels, Network Servers
        - **Blockchain**: DeFi Protocols, Smart Contracts
        - **AI/ML**: Knowledge Graphs, Data Processing
        - **DevOps**: CI/CD, Automation
        
        ## 📊 Growth Metrics
        
        ### Repository Health
        - **Documentation Coverage**: High (README, Projects, Resume)
        - **Automation Level**: Advanced (Multiple workflows)
        - **Update Frequency**: Daily (Automated)
        - **Content Quality**: Professional portfolio standard
        
        ### Professional Impact
        - **GitHub Profile**: Active and well-maintained
        - **Technical Depth**: Advanced systems programming
        - **Industry Relevance**: Cutting-edge technologies
        - **Community Engagement**: Open source contributions
        
        ## 🚀 Future Roadmap
        
        ### Short-term Goals (1-3 months)
        - Expand project portfolio with new repositories
        - Enhance documentation with more technical details
        - Increase automation and CI/CD capabilities
        
        ### Long-term Vision (6-12 months)
        - Establish thought leadership in systems programming
        - Contribute to major open source projects
        - Build comprehensive technical blog
        
        ---
        
        *This report is automatically generated and updated regularly.*
        *For more information, visit: [GitHub Profile](https://github.com/chord233)*
        EOF
        
        # 生成简化的活动摘要
        cat > ACTIVITY_SUMMARY.md << EOF
        # 🔥 Recent Activity Summary
        
        **Last Updated**: $timestamp
        
        ## This Week's Highlights
        - Repository maintenance and updates
        - Automated documentation improvements
        - Continuous integration enhancements
        - Project statistics tracking
        
        ## Commit Activity
        - **This Week**: $(git log --since="1 week ago" --oneline | wc -l) commits
        - **This Month**: $(git log --since="1 month ago" --oneline | wc -l) commits
        - **Total**: $(git rev-list --count HEAD) commits
        
        ## Recent Commits
        EOF
        
        # 添加最近的提交记录
        git log --oneline -10 | sed 's/^/- /' >> ACTIVITY_SUMMARY.md
        
        echo "" >> ACTIVITY_SUMMARY.md
        echo "---" >> ACTIVITY_SUMMARY.md
        echo "*Automated activity tracking - Updated every week*" >> ACTIVITY_SUMMARY.md
        
    - name: Update README with latest stats
      run: |
        # 在 README 中添加或更新统计信息
        if ! grep -q "## 📊 Quick Stats" README.md; then
          echo "" >> README.md
          echo "## 📊 Quick Stats" >> README.md
          echo "" >> README.md
        fi
        
        # 创建临时文件来重建 README
        cp README.md README_temp.md
        
        # 移除旧的统计信息（如果存在）
        sed -i '/## 📊 Quick Stats/,/^## /{ /^## 📊 Quick Stats/!{ /^## /!d; }; }' README_temp.md
        sed -i '/## 📊 Quick Stats/,/^---/{ /^## 📊 Quick Stats/!{ /^---/!d; }; }' README_temp.md
        
        # 添加新的统计信息
        cat >> README_temp.md << EOF
        
        ## 📊 Quick Stats
        
        - 🔥 **Total Commits**: $(git rev-list --count HEAD)
        - 📁 **Repository Files**: $(find . -type f | grep -v '.git' | wc -l)
        - 📝 **Documentation**: $(find . -name '*.md' | wc -l) files
        - 🤖 **Automation**: $(find .github/workflows -name '*.yml' 2>/dev/null | wc -l) workflows
        - 📅 **Last Updated**: $(date +'%Y-%m-%d')
        
        > 🚀 This profile is actively maintained with automated updates!
        
        ---
        EOF
        
        mv README_temp.md README.md
        
    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Commit statistics update
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git add .
        git commit -m "📊 Weekly project statistics update
        
        - Updated comprehensive project statistics
        - Refreshed activity summary and metrics
        - Enhanced README with latest data
        - Automated repository health tracking
        
        Stats: $(git rev-list --count HEAD) total commits, $(find . -name '*.md' | wc -l) docs"
        git push
        
    - name: No changes detected
      if: steps.verify-changed-files.outputs.changed == 'false'
      run: |
        echo "No changes detected in project statistics."
        echo "Repository data is up to date."